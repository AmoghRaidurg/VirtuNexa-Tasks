# -*- coding: utf-8 -*-
"""mini project week 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16BievIKwO_lNBznedGtmTOghKFMq7MPA
"""

"""file conversion project"""
import markdown
import tkinter as tk
from tkinter import filedialog, messagebox

def convert_md_to_html(md_file_path, output_file_path):
    """Convert Markdown file to HTML and save the output."""
    try:
        with open(md_file_path, "r", encoding="utf-8") as md_file:
            md_content = md_file.read()
            html_content = markdown.markdown(md_content)

        with open(output_file_path, "w", encoding="utf-8") as html_file:
            html_file.write(html_content)

        return True
    except Exception as e:
        print(f"Error: {e}")
        return False

def open_file_dialog():
    """Open file dialog for selecting a Markdown file."""
    file_path = filedialog.askopenfilename(filetypes=[("Markdown files", "*.md")])
    if file_path:
        output_path = file_path.replace(".md", ".html")
        success = convert_md_to_html(file_path, output_path)
        if success:
            messagebox.showinfo("Success", f"Converted to {output_path}")
        else:
            messagebox.showerror("Error", "Failed to convert file")

def create_gui():
    """Create a simple GUI using Tkinter."""
    root = tk.Tk()
    root.title("Markdown to HTML Converter")
    root.geometry("400x200")

    label = tk.Label(root, text="Select a Markdown file to convert:", font=("Arial", 12))
    label.pack(pady=10)

    select_button = tk.Button(root, text="Choose File", command=open_file_dialog, font=("Arial", 12))
    select_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    create_gui()


"""simple calculator """
import tkinter as tk
from tkinter import messagebox
import sqlite3
import logging

# Configure logging
logging.basicConfig(filename="calculator.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Database setup
def setup_database():
    conn = sqlite3.connect("history.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS calculations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            expression TEXT,
            result TEXT
        )
    """)
    conn.commit()
    conn.close()

setup_database()

def save_to_database(expression, result):
    """Save calculation to SQLite database."""
    conn = sqlite3.connect("history.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO calculations (expression, result) VALUES (?, ?)", (expression, result))
    conn.commit()
    conn.close()

def calculate(expression):
    """Evaluate the expression safely."""
    try:
        result = eval(expression)  # Eval is used here safely because input is controlled
        save_to_database(expression, str(result))
        logging.info(f"Calculated: {expression} = {result}")
        return result
    except ZeroDivisionError:
        logging.error("Attempted to divide by zero.")
        return "Error: Division by zero"
    except Exception as e:
        logging.error(f"Invalid input: {e}")
        return "Error: Invalid input"

def on_calculate():
    """Handle button click in GUI."""
    expression = entry.get()
    result = calculate(expression)
    result_label.config(text=f"Result: {result}")

def create_gui():
    """Create a simple GUI using Tkinter."""
    global entry, result_label
    root = tk.Tk()
    root.title("Calculator")
    root.geometry("300x250")

    label = tk.Label(root, text="Enter expression:", font=("Arial", 12))
    label.pack(pady=5)

    entry = tk.Entry(root, font=("Arial", 12))
    entry.pack(pady=5)

    calculate_button = tk.Button(root, text="Calculate", command=on_calculate, font=("Arial", 12))
    calculate_button.pack(pady=5)

    result_label = tk.Label(root, text="Result: ", font=("Arial", 12))
    result_label.pack(pady=5)

    root.mainloop()

if __name__ == "__main__":
    create_gui()